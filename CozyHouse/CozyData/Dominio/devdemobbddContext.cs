// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace CozyData.Dominio;

public partial class devdemobbddContext : DbContext
{
    public devdemobbddContext()
    {
    }

    public devdemobbddContext(DbContextOptions<devdemobbddContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<Apartment> Apartments { get; set; }

    public virtual DbSet<Building> Buildings { get; set; }

    public virtual DbSet<BuildingCompany> BuildingCompanies { get; set; }

    public virtual DbSet<BuildingImage> BuildingImages { get; set; }

    public virtual DbSet<BuildingStatusLog> BuildingStatusLogs { get; set; }

    public virtual DbSet<District> Districts { get; set; }

    public virtual DbSet<Floor> Floors { get; set; }

    public virtual DbSet<Purchase> Purchases { get; set; }

    public virtual DbSet<Request> Requests { get; set; }

    public virtual DbSet<RequestStatusLog> RequestStatusLogs { get; set; }

    public virtual DbSet<Status> Statuses { get; set; }

    public virtual DbSet<Street> Streets { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=tcp:devdemoserverbbdd.database.windows.net,1433;Initial Catalog=devdemobbdd;Persist Security Info=True;User ID=admsql;Password=P@ssw0rd");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Address>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Address__3214EC0748C1BAD7");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.IsApartment).HasDefaultValueSql("((1))");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Apartment).WithMany(p => p.Addresses).HasConstraintName("FKAddress937616");

            entity.HasOne(d => d.Building).WithMany(p => p.Addresses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKAddress69853");
        });

        modelBuilder.Entity<Apartment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Apartmen__3214EC072BB504EA");

            entity.ToTable("Apartment", tb => tb.HasTrigger("TrgApartmentUpdateUpdatedAt"));

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Floor).WithMany(p => p.Apartments).HasConstraintName("FKApartment152603");
        });

        modelBuilder.Entity<Building>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Building__3214EC07C24AE2B5");

            entity.ToTable("Building", tb =>
                {
                    tb.HasTrigger("TrgBuildingStatusLogInsert");
                    tb.HasTrigger("TrgBuildingUpdateUpdatedAt");
                });

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.EnergyCertificate).IsFixedLength();
            entity.Property(e => e.Price).HasDefaultValueSql("((0.00))");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.YearBuilt).HasDefaultValueSql("((1970))");

            entity.HasOne(d => d.BuildingCompany).WithMany(p => p.Buildings)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKBuilding524337");

            entity.HasOne(d => d.District).WithMany(p => p.Buildings)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKBuilding875021");

            entity.HasOne(d => d.Status).WithMany(p => p.Buildings)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKBuilding279633");

            entity.HasOne(d => d.Street).WithMany(p => p.Buildings)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKBuilding420566");
        });

        modelBuilder.Entity<BuildingCompany>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Building__3214EC0700C9B9F4");

            entity.ToTable("BuildingCompany", tb => tb.HasTrigger("TrgBuildingCompanyUpdateUpdatedAt"));

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<BuildingImage>(entity =>
        {
            entity.HasKey(e => e.BuildingImageId).HasName("PK__Building__D7442912C95376C0");

            entity.ToTable("BuildingImage", tb => tb.HasTrigger("TrgBuildingImageUpdateUpdatedAt"));

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Building).WithMany(p => p.BuildingImages).HasConstraintName("FKBuildingIm593721");
        });

        modelBuilder.Entity<BuildingStatusLog>(entity =>
        {
            entity.HasKey(e => new { e.BuildingId, e.StatusId, e.CreatedAt }).HasName("PK__Building__138872FF6FE64B89");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Building).WithMany(p => p.BuildingStatusLogs).HasConstraintName("FKBuildingSt501021");

            entity.HasOne(d => d.Status).WithMany(p => p.BuildingStatusLogs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKBuildingSt885424");
        });

        modelBuilder.Entity<District>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__District__3214EC0753C2A6F6");

            entity.ToTable("District", tb => tb.HasTrigger("TrgDistrictUpdateUpdatedAt"));

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");

            entity.HasMany(d => d.Streets).WithMany(p => p.Districts)
                .UsingEntity<Dictionary<string, object>>(
                    "DistrictStreet",
                    r => r.HasOne<Street>().WithMany()
                        .HasForeignKey("StreetId")
                        .HasConstraintName("FKDistrictSt200593"),
                    l => l.HasOne<District>().WithMany()
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FKDistrictSt746137"),
                    j =>
                    {
                        j.HasKey("DistrictId", "StreetId").HasName("PK__District__33DAAA75F47B7E26");
                        j.ToTable("DistrictStreet");
                        j.IndexerProperty<string>("DistrictId")
                            .HasMaxLength(36)
                            .IsUnicode(false);
                        j.IndexerProperty<string>("StreetId")
                            .HasMaxLength(36)
                            .IsUnicode(false);
                    });
        });

        modelBuilder.Entity<Floor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Floor__3214EC07FEBCD8B7");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.HasLift).HasDefaultValueSql("((1))");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Building).WithMany(p => p.Floors).HasConstraintName("FKFloor82292");
        });

        modelBuilder.Entity<Purchase>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Purchase__3214EC07736344DF");

            entity.ToTable("Purchase", tb => tb.HasTrigger("TrgPurchaseUpdateUpdatedAt"));

            entity.Property(e => e.Amount).HasDefaultValueSql("((0.00))");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.BuildingCompany).WithMany(p => p.Purchases)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPurchase526429");

            entity.HasOne(d => d.Building).WithMany(p => p.Purchases)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPurchase78453");

            entity.HasOne(d => d.Request).WithMany(p => p.Purchases)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKPurchase717750");
        });

        modelBuilder.Entity<Request>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Request__3214EC07E4E4C12C");

            entity.ToTable("Request", tb =>
                {
                    tb.HasTrigger("TrgRequestStatusLogInsert");
                    tb.HasTrigger("TrgRequestUpdateUpdatedAt");
                });

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Building).WithMany(p => p.Requests)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRequest514507");

            entity.HasOne(d => d.Status).WithMany(p => p.Requests)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRequest898910");
        });

        modelBuilder.Entity<RequestStatusLog>(entity =>
        {
            entity.HasKey(e => new { e.RequestId, e.StatusId, e.CreatedAt }).HasName("PK__RequestS__7443EE411BA686BD");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Request).WithMany(p => p.RequestStatusLogs).HasConstraintName("FKRequestSta565383");

            entity.HasOne(d => d.Status).WithMany(p => p.RequestStatusLogs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FKRequestSta994406");
        });

        modelBuilder.Entity<Status>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Status__3214EC075368BE62");

            entity.ToTable("Status", tb => tb.HasTrigger("TrgStatusUpdateUpdatedAt"));

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<Street>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Street__3214EC07C26C5B86");

            entity.ToTable("Street", tb => tb.HasTrigger("TrgStreetUpdateUpdatedAt"));

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(getdate())");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}